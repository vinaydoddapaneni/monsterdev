{"version":3,"sources":["components/Card/index.jsx","components/Cards/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","monster","name","email","Cardlist","map","components_Card","key","id","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchField","_this2","fetch","then","response","json","users","setState","_this3","_this$state","filteredMonster","filter","toLowerCase","includes","type","placeholder","onChange","e","target","value","Cards","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSAYeA,eAVH,SAACC,GACT,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,UAAUC,IAAK,uDACxBL,EAAAC,EAAAC,cAAA,UAAKH,EAAMO,QAAQC,MACnBP,EAAAC,EAAAC,cAAA,SAAIH,EAAMO,QAAQE,UCKfC,EARE,SAACV,GACd,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVJ,EAAMO,QAAQI,IAAI,SAAAJ,GAAO,OAC5BN,EAAAC,EAAAC,cAACS,EAAD,CAAMC,IAAKb,EAAMO,QAAQO,GAAIP,QAASA,QC0BjCQ,qBA7Bb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQ,CACXhB,QAAU,GACViB,YAAa,IALJR,mFASM,IAAAS,EAAAN,KACjBO,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKM,SAAS,CAACxB,QAAQuB,uCAEhC,IAAAE,EAAAb,KAAAc,EACwBd,KAAKI,MAA7BhB,EADA0B,EACA1B,QAASiB,EADTS,EACST,YACTU,EAAkB3B,EAAQ4B,OAAO,SAAA5B,GAAO,OAC5CA,EAAQC,KAAK4B,cAAcC,SAASb,EAAYY,iBAElD,OACEnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,kBACAH,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,SAASC,YAAY,iBAAiBnC,UAAU,WAAWoC,SAAU,SAAAC,GAAC,OAAGT,EAAKD,SAAS,CAACP,YAAaiB,EAAEC,OAAOC,WAC1H1C,EAAAC,EAAAC,cAACyC,EAAD,CAAUrC,QAAS2B,YAxBTW,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.684ef4d1.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\nconst Card =(props) =>{\n    return(\n        <div className='card-container'>\n            <img alt='monster' src={'https://robohash.org/${props.monster.id}?set=set2&'}/>\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport './card-list.styles.css';\nimport Card from '../Card';\n\nconst Cardlist = (props) =>{\n    return(\n        <div className='card-list row'>\n            {props.monster.map(monster =>\n          <Card key={props.monster.id} monster={monster}/>)}\n        </div>\n    )\n}\nexport default Cardlist;","import React,{Component} from 'react';\nimport Cardlist from './components/Cards';\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      monster : [],\n      searchField :''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monster:users}))\n  }\n  render(){\n    const{monster, searchField} = this.state;\n    const filteredMonster = monster.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n    return(\n      <div>\n        <h1 className='text-center'>Monsters Color</h1>\n        <input type='search' placeholder='search monster' className='offset-5' onChange={e =>this.setState({searchField: e.target.value})}/>\n        <Cardlist monster={filteredMonster}/>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}